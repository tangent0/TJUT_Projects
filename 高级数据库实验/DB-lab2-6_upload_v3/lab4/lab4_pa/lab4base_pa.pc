/*
*       Author:         Paul Girard Ph.D., UQAC
*       Date:           March 2008 
*       Objective:      Program using Pro*C/C++ and gcc to show how to use 
*                       different type of PL/SQL blocks & SQL in a C PGM
*
*       Step 1: Precompilation with Pro*C/C++
* proc INAME=lab4base.pc CODE=ANSI_C SQLCHECK=semantics MODE=oracle DBMS=v8 USERID=user/password CHAR_MAP=charz
*
*       Step 2: Compilation with gcc    
* gcc lab4base.c -o lab4base -include /$ORACLE_HOME/precomp/public/sqlca.h -lclntsh -L$ORACLE_HOME/lib/ -B$ORACLE_HOME/lib
*		
*		modified by ora00176 in may,2013
*/

#include <stdio.h>
#include <stdlib.h>
 
void sql_error();
void do_connect();
void lispart();
//
void crepart();
void cresupp();
void creprod();
void low_part();
void pot_supp();
void cre_po();
//
int print_menu();

int main()
{ 
	EXEC SQL WHENEVER SQLERROR do sql_error("Error at connect"); 
	
	do_connect();		/* connection to Oracle instance */

/*	Display the program menu
*	and execution of the transaction 
*/
	
	while (1)	/* infinite loop */
	{
	 switch (print_menu())
	 {
	  case 1: lispart();
		  break;
	  case 2: crepart();
		  break;
	  case 3: cresupp();
	  	  break;
	  case 4: creprod();
	  	  break;
	  case 5: low_part();
	  	  break;
	  case 6: pot_supp();
		  break;
	  case 7: cre_po();
		  break;
          case 8: puts("\nBye!"); 
  	  	exit(0);
 	  default: puts("\n =====> Enter a digit from the menu please ?");
		   break;
	 }
	}
	
	EXEC SQL COMMIT WORK RELEASE;		/* libère les verroux et déconnecte */
					
	exit(0); 
}			/* end of main() program */

/* ******************************************************************************************
*	Function to display the original error Oracle message 
*  ******************************************************************************************
*/

void sql_error(char *msg)
{
 	char ora_msg[512];			/* buffer for Oracle error message */
 	int buf_len, msg_len;
 	
  	EXEC SQL WHENEVER SQLERROR continue;	/* Prevent an infinite loop */
  	
  	printf("\n%s\n",msg);			/* print the local program message */
 	buf_len=sizeof(ora_msg);
 	
 	sqlglm(ora_msg,&buf_len, &msg_len);	/* read the Oracle error message */
 	printf("\n%.*s\n",msg_len, ora_msg);	/* print this message */
 	
 	EXEC SQL ROLLBACK RELEASE;		/* free locks */
 	exit(1);
}		/*	fin de sql_error */

/* ******************************************************************************************
*	Function to do a connection to an Oracle user schema
*  ******************************************************************************************
*/

void do_connect()
{
   char *uid="ora00176/RFy7qP";

	EXEC SQL CONNECT :uid; 
	printf("Connected to Oracle schema\n");
}

/* ******************************************************************************************
*	Function to display the contents of a given part
*  ******************************************************************************************
*/

void lispart()
{
char	description[16];     /* C needs 1 more octet than Oracle for binary 0 
				at the end of a C character type */
int 	my_partid, none=1;
   	for (;;) 		/* infinite loop until user enter a 0 */
	{
   		printf("Number of the part (0 to quit )? ");
		scanf("%d",&my_partid);		

		printf("Part Number : %d\n",my_partid);
		if (my_partid == 0) 
		{ 
      			EXEC SQL COMMIT; 
      			printf("End of this transaction\n"); 
      			break; 
   		} 

/*-------------- Beginning the PL/SQL block -----------------*/ 

	EXEC SQL EXECUTE
	BEGIN 
		SELECT part_name INTO :description 	/* note: description needs 1 octet more */
		FROM ora00176.part WHERE part_number = :my_partid;
		EXCEPTION
         		WHEN NO_DATA_FOUND THEN 
         		:none:=0;
	END;
	END-EXEC;

/*-------------- end of PL/SQL block -----------------*/ 

	if (none==0)  
	   {
         	printf("Record not found \n");
		none=1;
	   }
	else
	    {
		printf("Name of the part\n"); 
		printf("---------------\n"); 
		printf("%s\n",description); 
	    }
	EXEC SQL COMMIT;
	}				/* end of infinite loop */
	return;	
}


void crepart()
{
	int num;
	char name[16];
	int stock;
	int min;
	int ordered;
	char unit[16];
	int price;
	
	printf("part_number: "); scanf("%d",&num);
	printf("part_name: ");   scanf("%s",&name);	
	printf("qty_in_stock: ");scanf("%d",&stock);	
	printf("qty_minimum: "); scanf("%d",&min);	
	printf("qty_ordered: "); scanf("%d",&ordered);	
	printf("unit: ");        scanf("%s",&unit);	
	printf("unit_price: ");  scanf("%d",&price);	
	
	EXEC SQL insert into ora00176.part values(:num,:name,:stock,:min,:ordered,:unit,:price);
	EXEC SQL COMMIT;
	
	printf("The creation has been completed!");
	return;
}

void cresupp()
{
	printf("This function has not been completed...");
	return;
}

void creprod()
{
	printf("This function has not been completed...");
	return;
}

void low_part()
{
	printf("This function has not been completed...");
	return;
}

void pot_supp()
{
	printf("This function has not been completed...");
	return;
}

/* *************************************************************
*	Function to display each part with the responsible agent
*  *************************************************************
*/

void cre_po()
{
	printf("This function has not been completed...");
	return;
}

/* ************************************************************
*	Function print the menu and choose the transaction
*  ************************************************************
*/

int print_menu()
{
   int choice;				/* id of menu */
	printf("\n\t Choose a transaction by entering a number \n");
	printf("\t *****************************************\n");
	
	printf("\t (1) LIST PART\n");
	printf("\t (2) CREATE PART\n");
	printf("\t (3) CREATE SUPPLIER\n");
	printf("\t (4) CREATE PRODUCT\n");
	printf("\t (5) LOW PART\n");
	printf("\t (6) POTENTIAL SUPPLIER\n");
	printf("\t (7) CREATE PURCHASE ORDER\n");
	printf("\t (8) QUIT\n");
	
	printf("Enter your choice ? ");	
	scanf("%d",&choice);		/* read the choice */
	return choice;
}

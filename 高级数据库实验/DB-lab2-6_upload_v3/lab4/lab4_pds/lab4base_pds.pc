/*
*       Author:         Paul Girard Ph.D., UQAC
*       Date:           March 2008 
*       Objective:      Program using Pro*C/C++ and gcc to show how to use 
*                       different type of PL/SQL blocks & SQL in a C PGM
*
*       Step 1: Precompilation with Pro*C/C++
* proc INAME=lab4base.pc CODE=ANSI_C SQLCHECK=semantics MODE=oracle DBMS=v8 USERID=user/password CHAR_MAP=charz
*
*       Step 2: Compilation with gcc    
* gcc lab4base.c -o lab4base -include /$ORACLE_HOME/precomp/public/sqlca.h -lclntsh -L$ORACLE_HOME/lib/ -B$ORACLE_HOME/lib
*
*		modified by ora00176 in may,2013
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
void sql_error();
void do_connect();
//
void lisagent();
void creagent();
void quant();
void respon();
void modrespon();
//
int print_menu();

int main()
{ 
	EXEC SQL WHENEVER SQLERROR do sql_error("Error at connect"); 
	
	do_connect();		/* connection to Oracle instance */

/*	Display the program menu
*	and execution of the transaction 
*/
	
	while (1)	/* infinite loop */
	{
	 switch (print_menu())
	 {
	  case 1: lisagent();
		  break;
	  case 2: creagent();
		  break;
	  case 3: quant();
	  	  break;
	  case 4: respon();
	  	  break;
	  case 5: modrespon();
	  	  break;
      case 6: puts("\nBye!"); 
  	  	exit(0);
 	  default: puts("\n =====> Enter a digit from the menu please ?");
		   break;
	 }
	}
	
	EXEC SQL COMMIT WORK RELEASE;		/* libère les verroux et déconnecte */
					
	exit(0); 
}			/* end of main() program */

/* ******************************************************************************************
*	Function to display the original error Oracle message 
*  ******************************************************************************************
*/

void sql_error(char *msg)
{
 	char ora_msg[512];			/* buffer for Oracle error message */
 	int buf_len, msg_len;
 	
  	EXEC SQL WHENEVER SQLERROR continue;	/* Prevent an infinite loop */
  	
  	printf("\n%s\n",msg);			/* print the local program message */
 	buf_len=sizeof(ora_msg);
 	
 	sqlglm(ora_msg,&buf_len, &msg_len);	/* read the Oracle error message */
 	printf("\n%.*s\n",msg_len, ora_msg);	/* print this message */
 	
 	EXEC SQL ROLLBACK RELEASE;		/* free locks */
 	exit(1);
}		/*	fin de sql_error */

/* ******************************************************************************************
*	Function to do a connection to an Oracle user schema
*  ******************************************************************************************
*/

void do_connect()
{
   char *uid="ora00176/RFy7qP";

	EXEC SQL CONNECT :uid; 
	printf("Connected to Oracle schema\n");
}

/* ******************************************************************************************
*	Function to display the contents of a given part
*  ******************************************************************************************
*/

void lisagent()
{
char	description[16];     /* C needs 1 more octet than Oracle for binary 0 
				at the end of a C character type */
int 	my_emp_num, none=1;
   	for (;;) 		/* infinite loop until user enter a 0 */
	{
   		printf("Number of the Purchasing Agent (0 to quit )? ");
		scanf("%d",&my_emp_num);
		
		if (my_emp_num == 0) 
		{ 
      			EXEC SQL COMMIT; 
      			printf("End of this transaction\n"); 
      			break; 
   		} 

/*-------------- Beginning the PL/SQL block -----------------*/ 

	EXEC SQL EXECUTE
	BEGIN 
		SELECT pa_name INTO :description 	/* note: description needs 1 octet more */
		FROM ora00176.pa_agent WHERE emp_num = :my_emp_num;
		EXCEPTION
         		WHEN NO_DATA_FOUND THEN 
         		:none:=0;
	END;
	END-EXEC;

/*-------------- end of PL/SQL block -----------------*/ 

	if (none==0)  
	   {
         	printf("Record not found \n");
		none=1;
	   }
	else
	    {
		printf("Name of the PA\n"); 
		printf("---------------\n");		
		printf("%s\n",description); 
	    }
	EXEC SQL COMMIT;
	}				/* end of infinite loop */
	printf("\n");
	return;	
}


void creagent()
{
	int my_emp_num;
	char my_pa_name[16];

	printf("Please enter new PA_number: ");
	scanf("%d",&my_emp_num); getchar();
	printf("Please enter new PA_name: ");
	gets(my_pa_name);

	EXEC SQL INSERT INTO ora00176.pa_agent VALUES(:my_emp_num,:my_pa_name);
	EXEC SQL COMMIT;

	printf("INSERT COMPELETED!\n");
	return;
}

void quant()
{
	printf("This function has not been completed...");
	return;
}

/* *************************************************************
*	Function to display each part with the responsible agent
*  *************************************************************
*/

void respon()
{
int	my_emp_num, my_partid;
char	description[16];	/* 1 more octet for the binary 0 */
char	my_pa_name[16];  	/* 1 more octet for the binary 0 */
 	 	 	
	EXEC SQL declare c1 cursor for
        	select p.part_number, p.part_name, pa_agent.emp_num, pa_agent.pa_name 
		from ora00176.part p, ora00176.responsible r, ora00176.pa_agent 
		where pa_agent.emp_num = r.emp_num and p.part_number = r.part_number;
	
	EXEC SQL open c1;

	EXEC SQL WHENEVER NOT FOUND do break;
	
 	printf("\tPart ID\tName of Part\t\tEmp Number\tAgent\n");	
	for (;;)
	{
		EXEC SQL fetch c1 into :my_partid, :description, :my_emp_num, :my_pa_name ;

		printf("\t%4d\t%s\t\t%4d\t%s\n",my_partid, description,my_emp_num,my_pa_name);
	}
	printf("\n");
	
	printf("End of this transaction\n");
	EXEC SQL close c1;			
	EXEC SQL COMMIT;		/* free locks and keep the connection */
	return;
}

/* ******************************************************************************************
*	Function modifying the status of a part
*  ******************************************************************************************
*/

void modrespon()
{
	printf("This function has not been completed...");
	return;
}

/* ************************************************************
*	Function print the menu and choose the transaction
*  ************************************************************
*/

int print_menu()
{
   int choice;				/* id of menu */
	printf("\n\t Choose a transaction by entering a number \n");
	printf("\t *****************************************\n");
	printf("\t (1) LIST AGENT\n");
	printf("\t (2) CREATE AGENT\n");
	printf("\t (3) QUANT\n");
	printf("\t (4) RESPONSIBLE\n");
	printf("\t (5) MODIFY RESPONSIBLE\n");
	printf("\t (6) QUIT\n");
	printf("Enter your choice ? ");	
	scanf("%d",&choice);		/* read the choice */
	return choice;
}
